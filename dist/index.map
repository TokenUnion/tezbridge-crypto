{"version":3,"sources":["codec.js","crypto.js","index.js"],"names":["bytesConcat","x","y","tmp","Uint8Array","length","set","bs58checkEncode","input","prefix","bs58check","encode","bs58checkDecode","decode","slice","bs58checkPrefixPick","bytes","block_hash","operation_hash","operation_list_hash","operation_list_list_hash","protocol_hash","context_hash","ed25519_public_key_hash","secp256k1_public_key_hash","p256_public_key_hash","cryptobox_public_key_hash","ed25519_seed","ed25519_public_key","secp256k1_secret_key","p256_secret_key","ed25519_encrypted_seed","secp256k1_encrypted_secret_key","p256_encrypted_secret_key","secp256k1_public_key","p256_public_key","secp256k1_scalar","secp256k1_element","ed25519_secret_key","ed25519_signature","secp256k1_signature","p256_signature","generic_signature","chain_id","contract_hash","prefix_mapping","matched_mapping","Net","id","tz1","tz2","tz3","KT1","B","o","P","Lo","Co","LLo","SSp","edsk","edpk","spsk","p2sk","GSp","sppk","p2pk","edesk","spesk","p2esk","sig","p2sig","edsig","spsig1","key","len","name","getContractHexKey","contract","hex","elliptic","utils","toHex","hex_key","undefined","map","join","watermark","block_header","endorsement","operation","custom","op_mapping","prim_mapping","annot","decodeRawBytes","toUpperCase","index","read","walk","b","prim","Object","op","args","Array","apply","int_len","parseInt","data","match_result","match","string_raw","string","TextDecoder","first_bytes","toString","padStart","is_positive","valid_bytes","checknext","push","int","reverse","limit","seq_lst","blake2bHash","blake","blake2b","getMnemonic","strength","bip39","generateMnemonic","Key","constructor","secret_key","pub_key","address","ed25519","codec","secp256k1","p256","getSecretKey","getPublicKey","decryptKey","encrypted","password","encrypted_bytes","salt","encrypted_msg","crypto","pbkdf2Sync","result","secretbox","open","key_mapping","seed","eddsa","key_pair","nacl","sign","keyPair","fromSeed","secretKey","publicKey","ec","keyFromPrivate","concat","getPublic","getX","toArray","getKeyFromSeed","seed_bytes","getKeyFromWords","words","mnemonic","mnemonicToSeed","signOperation","operation_bytes","marked_operation","sig_mapping","secret_key_bytes","keyFromSecret","sig_bytes","toBytes","r","s"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport bs58check from 'bs58check'\nimport elliptic from 'elliptic'\nimport type { Micheline } from './types'\n\n\nexport function bytesConcat(x : Uint8Array, y : Uint8Array) {\n  const tmp = new Uint8Array(x.length + y.length)\n  tmp.set(x, 0)\n  tmp.set(y, x.length)\n  return tmp\n}\n\nexport function bs58checkEncode(input : Uint8Array, prefix : Uint8Array) {\n  return bs58check.encode(bytesConcat(prefix, input))\n}\n\nexport function bs58checkDecode(input : string, prefix? : Uint8Array) {\n  return bs58check.decode(input).slice(prefix ? prefix.length : bs58checkPrefixPick(input).bytes.length)\n}\n\nexport const prefix = {\n  block_hash: new Uint8Array([1, 52]), // B(51)\n  operation_hash: new Uint8Array([5, 116]), // o(51)\n  operation_list_hash: new Uint8Array([133, 233]), // Lo(52)\n  operation_list_list_hash: new Uint8Array([29, 159, 109]), // LLo(53)\n  protocol_hash: new Uint8Array([2, 170]), // P(51)\n  context_hash: new Uint8Array([79, 199]), // Co(52)\n\n  ed25519_public_key_hash: new Uint8Array([6, 161, 159]), // tz1(36)\n  secp256k1_public_key_hash: new Uint8Array([6, 161, 161]), // tz2(36)\n  p256_public_key_hash: new Uint8Array([6, 161, 164]), // tz3(36)\n\n  cryptobox_public_key_hash: new Uint8Array([153, 103]), // id(30)\n\n  ed25519_seed: new Uint8Array([13, 15, 58, 7]), // edsk(54)\n  ed25519_public_key: new Uint8Array([13, 15, 37, 217]), // edpk(54)\n  secp256k1_secret_key: new Uint8Array([17, 162, 224, 201]), // spsk(54)\n  p256_secret_key: new Uint8Array([16, 81, 238, 189]), // p2sk(54)\n\n  ed25519_encrypted_seed: new Uint8Array([7, 90, 60, 179, 41]), // edesk(88)\n  secp256k1_encrypted_secret_key: new Uint8Array([9, 237, 241, 174, 150]), // spesk(88)\n  p256_encrypted_secret_key: new Uint8Array([9, 48, 57, 115, 171]), // p2esk(88)\n\n  secp256k1_public_key: new Uint8Array([3, 254, 226, 86]), // sppk(55)\n  p256_public_key: new Uint8Array([3, 178, 139, 127]), // p2pk(55)\n  secp256k1_scalar: new Uint8Array([38, 248, 136]), // SSp(53)\n  secp256k1_element: new Uint8Array([5, 92, 0]), // GSp(54)\n\n  ed25519_secret_key: new Uint8Array([43, 246, 78, 7]), // edsk(98)\n  ed25519_signature: new Uint8Array([9, 245, 205, 134, 18]), // edsig(99)\n  secp256k1_signature: new Uint8Array([13, 115, 101, 19, 63]), // spsig1(99)\n  p256_signature: new Uint8Array([54, 240, 44, 52]), // p2sig(98)\n  generic_signature: new Uint8Array([4, 130, 43]), // sig(96)\n\n  chain_id: new Uint8Array([7, 82, 0]), // Net(15)\n\n  contract_hash: new Uint8Array([2, 90, 121]) // KT1(36)\n}\n\nexport function bs58checkPrefixPick(input : string) : {bytes: Uint8Array, name: string} {\n  const prefix_mapping = {\n    [15]: {\n      Net: 'chain_id'\n    },\n    [30]: {\n      id: 'cryptobox_public_key_hash'\n    },\n    [36]: {\n      tz1: 'ed25519_public_key_hash',\n      tz2: 'secp256k1_public_key_hash',\n      tz3: 'p256_public_key_hash',\n      KT1: 'contract_hash'\n    },\n    [51]: {\n      B: 'block_hash',\n      o: 'operation_hash',\n      P: 'protocol_hash'\n    },\n    [52]: {\n      Lo: 'operation_list_hash',\n      Co: 'context_hash'\n    },\n    [53]: {\n      LLo: 'operation_list_list_hash',\n      SSp: 'secp256k1_scalar'\n    },\n    [54]: {\n      edsk: 'ed25519_seed',\n      edpk: 'ed25519_public_key',\n      spsk: 'secp256k1_secret_key',\n      p2sk: 'p256_secret_key',\n      GSp: 'secp256k1_element'\n    },\n    [55]: {\n      sppk: 'secp256k1_public_key',\n      p2pk: 'p256_public_key'\n    },\n    [88]: {\n      edesk: 'ed25519_encrypted_seed',\n      spesk: 'secp256k1_encrypted_secret_key',\n      p2esk: 'p256_encrypted_secret_key'\n    },\n    [96]: {\n      sig: 'generic_signature'\n    },\n    [98]: {\n      edsk: 'ed25519_secret_key',\n      p2sig: 'p256_signature'\n    },\n    [99]: {\n      edsig: 'ed25519_signature',\n      spsig1: 'secp256k1_signature'\n    }\n  }\n\n  const matched_mapping = prefix_mapping[input.length]\n  if (matched_mapping) {\n    for (const key in matched_mapping) {\n      const len = key.length\n      if (input.slice(0, len) === key)\n        return {bytes: prefix[matched_mapping[key]], name:matched_mapping[key]} \n    }\n  }\n\n  throw `No prefix found for: ${input}`\n}\n\nexport function getContractHexKey(contract : string) {\n  if (contract.length !== 36 || contract.slice(0, 3) !== 'KT1')\n    throw `invalid contract: ${contract}`\n\n  const bytes = bs58checkDecode(contract, prefix.contract_hash)\n  const hex = elliptic.utils.toHex(bytes)\n  const hex_key = [[0,2], [2,4], [4,6], [6,8], [8,10], [10,undefined]].map(x => hex.slice(x[0], x[1])).join('/')\n\n  return hex_key\n}\n\nexport const watermark = {\n  block_header(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([1]), chain_id)\n  },\n  endorsement(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([2]), chain_id)\n  },\n  operation() {\n    return new Uint8Array([3])\n  },\n  custom(x : Uint8Array) {\n    return x\n  }\n}\n\nconst op_mapping = {\n  '00':'parameter',\n  '01':'storage',\n  '02':'code',\n  '03':'False',\n  '04':'Elt',\n  '05':'Left',\n  '06':'None',\n  '07':'Pair',\n  '08':'Right',\n  '09':'Some',\n  '0A':'True',\n  '0B':'Unit',\n  '0C':'PACK',\n  '0D':'UNPACK',\n  '0E':'BLAKE2B',\n  '0F':'SHA256',\n  '10':'SHA512',\n  '11':'ABS',\n  '12':'ADD',\n  '13':'AMOUNT',\n  '14':'AND',\n  '15':'BALANCE',\n  '16':'CAR',\n  '17':'CDR',\n  '18':'CHECK_SIGNATURE',\n  '19':'COMPARE',\n  '1A':'CONCAT',\n  '1B':'CONS',\n  '1C':'CREATE_ACCOUNT',\n  '1D':'CREATE_CONTRACT',\n  '1E':'IMPLICIT_ACCOUNT',\n  '1F':'DIP',\n  '20':'DROP',\n  '21':'DUP',\n  '22':'EDIV',\n  '23':'EMPTY_MAP',\n  '24':'EMPTY_SET',\n  '25':'EQ',\n  '26':'EXEC',\n  '27':'FAILWITH',\n  '28':'GE',\n  '29':'GET',\n  '2A':'GT',\n  '2B':'HASH_KEY',\n  '2C':'IF',\n  '2D':'IF_CONS',\n  '2E':'IF_LEFT',\n  '2F':'IF_NONE',\n  '30':'INT',\n  '31':'LAMBDA',\n  '32':'LE',\n  '33':'LEFT',\n  '34':'LOOP',\n  '35':'LSL',\n  '36':'LSR',\n  '37':'LT',\n  '38':'MAP',\n  '39':'MEM',\n  '3A':'MUL',\n  '3B':'NEG',\n  '3C':'NEQ',\n  '3D':'NIL',\n  '3E':'NONE',\n  '3F':'NOT',\n  '40':'NOW',\n  '41':'OR',\n  '42':'PAIR',\n  '43':'PUSH',\n  '44':'RIGHT',\n  '45':'SIZE',\n  '46':'SOME',\n  '47':'SOURCE',\n  '48':'SENDER',\n  '49':'SELF',\n  '4A':'STEPS_TO_QUOTA',\n  '4B':'SUB',\n  '4C':'SWAP',\n  '4D':'TRANSFER_TOKENS',\n  '4E':'SET_DELEGATE',\n  '4F':'UNIT',\n  '50':'UPDATE',\n  '51':'XOR',\n  '52':'ITER',\n  '53':'LOOP_LEFT',\n  '54':'ADDRESS',\n  '55':'CONTRACT',\n  '56':'ISNAT',\n  '57':'CAST',\n  '58':'RENAME',\n  '59':'bool',\n  '5A':'contract',\n  '5B':'int',\n  '5C':'key',\n  '5D':'key_hash',\n  '5E':'lambda',\n  '5F':'list',\n  '60':'map',\n  '61':'big_map',\n  '62':'nat',\n  '63':'option',\n  '64':'or',\n  '65':'pair',\n  '66':'set',\n  '67':'signature',\n  '68':'string',\n  '69':'bytes',\n  '6A':'mutez',\n  '6B':'timestamp',\n  '6C':'unit',\n  '6D':'operation',\n  '6E':'address',\n  '6F':'SLICE',\n}\n\nconst prim_mapping = {\n  '00': 'int',    \n  '01': 'string',             \n  '02': 'seq',             \n  '03': {name: 'prim', len: 0, annot: false},          \n  '04': {name: 'prim', len: 0, annot: true},\n  '05': {name: 'prim', len: 1, annot: false},           \n  '06': {name: 'prim', len: 1, annot: true},   \n  '07': {name: 'prim', len: 2, annot: false},          \n  '08': {name: 'prim', len: 2, annot: true},  \n  '09': {name: 'prim', len: 3, annot: true},\n  '0A': 'bytes'                  \n}\n\nexport function decodeRawBytes(bytes : string) : Micheline {\n  bytes = bytes.toUpperCase()\n  \n  let index = 0\n\n  const read = len => bytes.slice(index, index + len)\n\n  const walk = () => {\n    const b = read(2)\n    const prim = prim_mapping[b]\n    \n    if (prim instanceof Object) {\n\n      index += 2\n      const op = op_mapping[read(2)]\n      index += 2\n\n      const args = Array.apply(null, new Array(prim.len))\n      return {prim: op, args: args.map(() => walk())}\n\n    } else {\n      if (b === '0A') {\n\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n        return {bytes: data}\n\n      } else if (b === '01') {\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n\n        const match_result = data.match(/[\\dA-F]{2}/g)\n        if (match_result instanceof Array) {\n          const string_raw = new Uint8Array(match_result.map(x => parseInt(x, 16)))\n          return {string: new TextDecoder('utf-8').decode(string_raw)}\n        } else {\n          throw \"Input bytes error\"\n        }\n\n      } else if (b === '00') {\n        index += 2\n\n        const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n        index += 2\n        const is_positive = first_bytes[1] === '0'\n\n        const valid_bytes = [first_bytes.slice(2)]\n\n        let checknext = first_bytes[0] === '1'\n        while (checknext) {\n          const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n          index += 2\n\n          valid_bytes.push(bytes.slice(1))\n          checknext = bytes[0] === '1'\n        }\n\n        return {int: parseInt(valid_bytes.reverse().join(''), 2).toString()}\n      } else if (b === '02') {\n        index += 2\n\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        const limit = index + int_len\n\n        const seq_lst = []\n        while (limit > index) {\n          seq_lst.push(walk())\n        }\n        return seq_lst\n      }\n\n    }\n\n    throw 'Invalid raw bytes'\n  }\n\n  return walk()\n}\n\nexport default {\n  prefix,\n  watermark,\n  bs58checkEncode,\n  bs58checkDecode,\n  bs58checkPrefixPick,\n  getContractHexKey,\n  bytesConcat,\n  decodeRawBytes\n}","// @flow\n\nimport bip39 from 'bip39'\nimport codec from './codec'\nimport elliptic from 'elliptic'\nimport blake from 'blakejs'\nimport crypto from 'crypto'\nimport { secretbox } from 'tweetnacl'\nimport nacl from 'tweetnacl'\n\nexport function blake2bHash(input : Uint8Array, len : number = 32) {\n  return blake.blake2b(input, null, len)\n}\n\nexport function getMnemonic(strength? : number) {\n  return bip39.generateMnemonic(strength)\n}\n\nclass Key {\n  name : string\n  secret_key : Uint8Array\n  pub_key : Uint8Array\n  address : string\n\n  constructor(name : 'ed25519' | 'secp256k1' | 'p256', secret_key : Uint8Array, pub_key : Uint8Array) {\n    this.name = name\n    this.secret_key = secret_key\n    this.pub_key = pub_key\n\n    this.address = {\n      ed25519: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.ed25519_public_key_hash),\n      secp256k1: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.secp256k1_public_key_hash),\n      p256: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.p256_public_key_hash) \n    }[this.name]()\n  }\n\n  getSecretKey() {\n    return {\n      ed25519: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.ed25519_secret_key),\n      secp256k1: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.secp256k1_secret_key),\n      p256: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.p256_secret_key)\n    }[this.name]()\n  }\n\n  getPublicKey() {\n    return {\n      ed25519: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.ed25519_public_key),\n      secp256k1: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.secp256k1_public_key),\n      p256: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.p256_public_key)\n    }[this.name]()\n  }\n}\n\n\nexport function decryptKey(encrypted : string, password : string) : Key {\n  const prefix = codec.bs58checkPrefixPick(encrypted)\n  const encrypted_bytes = codec.bs58checkDecode(encrypted, prefix.bytes)\n  const salt = encrypted_bytes.slice(0, 8)\n  const encrypted_msg = encrypted_bytes.slice(8)\n  const key = crypto.pbkdf2Sync(password, salt, 32768, 32, 'sha512')\n  const result = secretbox.open(encrypted_msg, new Uint8Array(24), key)\n  const key_mapping = {\n    ed25519_encrypted_seed: (seed) => {\n      const ed25519 = new elliptic.eddsa('ed25519')\n      const key_pair = nacl.sign.keyPair.fromSeed(seed)\n      return new Key('ed25519', key_pair.secretKey, key_pair.publicKey)\n    },\n    secp256k1_encrypted_secret_key: (key) => {\n      const key_pair = (new elliptic.ec('secp256k1')).keyFromPrivate(key)\n      const pub_key = new Uint8Array([2].concat(key_pair.getPublic().getX().toArray()))\n      return new Key('secp256k1', key, pub_key)\n    },\n    p256_encrypted_secret_key: (key) =>  {\n      const key_pair = (new elliptic.ec('p256')).keyFromPrivate(key)\n      const pub_key = new Uint8Array([3].concat(key_pair.getPublic().getX().toArray()))\n      return new Key('p256', key, pub_key)\n    }\n  }\n\n  if (prefix.name in key_mapping) {\n    return key_mapping[prefix.name](result)\n  } else {\n    throw 'No valid prefix for encrypted key found'\n  }\n}\n\nexport function getKeyFromSeed(seed : string | Uint8Array) {\n  const seed_bytes = typeof seed === 'string' ? codec.bs58checkDecode(seed) : seed\n  const key_pair = nacl.sign.keyPair.fromSeed(seed_bytes)\n  return new Key('ed25519', key_pair.secretKey, key_pair.publicKey)\n}\n\nexport function getKeyFromWords(words : string | Array<string>, password? : string) {\n  const mnemonic = words instanceof Array ? words.join(' ') : words\n  const seed_bytes = bip39.mnemonicToSeed(mnemonic, password).slice(0, 32)\n  return getKeyFromSeed(seed_bytes)\n}\n\nexport function signOperation(operation_bytes : Uint8Array, secret_key : string) {\n  const marked_operation = codec.bytesConcat(codec.watermark.operation(), operation_bytes)\n  const operation_hash = blake2bHash(marked_operation)\n  const prefix = codec.bs58checkPrefixPick(secret_key)\n  const sig_mapping = {\n    ed25519_secret_key: codec.prefix.ed25519_signature,\n    secp256k1_secret_key: codec.prefix.secp256k1_signature,\n    p256_secret_key: codec.prefix.p256_signature\n  }\n\n  const secret_key_bytes = codec.bs58checkDecode(secret_key, prefix.bytes)\n\n  if (prefix.name in sig_mapping) {\n    const key = {\n      ed25519_secret_key: () => (new elliptic.eddsa('ed25519')).keyFromSecret(secret_key_bytes),\n      secp256k1_secret_key: () => (new elliptic.ec('secp256k1')).keyFromPrivate(secret_key_bytes),\n      p256_secret_key: () => (new elliptic.ec('p256')).keyFromPrivate(secret_key_bytes)\n    }[prefix.name]()\n\n    const sig_bytes = prefix.name === 'ed25519_secret_key' ? \n      new Uint8Array(key.sign(operation_hash).toBytes()) :\n      (sig => new Uint8Array(sig.r.toArray().concat(sig.s.toArray())))(key.sign(operation_hash)) \n\n    return codec.bs58checkEncode(sig_bytes, sig_mapping[prefix.name])\n  } else {\n    throw `invalid prefix for: ${secret_key}`\n  }\n}\n\nexport default {\n  getMnemonic,\n  getKeyFromSeed,\n  getKeyFromWords,\n  decryptKey,\n  signOperation\n}","// @flow\n\nimport codec from './codec'\nimport crypto from './crypto'\n\nexport default {\n  codec,\n  crypto\n}"]}