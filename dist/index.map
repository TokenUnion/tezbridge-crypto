{"version":3,"sources":["codec.js","crypto.js","index.js"],"names":["bytesConcat","x","y","tmp","Uint8Array","length","set","bs58check_encode","prefix","input","bs58check","encode","bs58check_decode","decode","slice","block_hash","operation_hash","operation_list_hash","operation_list_list_hash","protocol_hash","context_hash","ed25519_public_key_hash","secp256k1_public_key_hash","p256_public_key_hash","cryptobox_public_key_hash","ed25519_seed","ed25519_public_key","secp256k1_secret_key","p256_secret_key","ed25519_encrypted_seed","secp256k1_encrypted_secret_key","p256_encrypted_secret_key","secp256k1_public_key","p256_public_key","secp256k1_scalar","secp256k1_element","ed25519_secret_key","ed25519_signature","secp256k1_signature","p256_signature","generic_signature","chain_id","watermark","block_header","endorsement","operation","custom","op_mapping","prim_mapping","name","len","annot","decodeRawBytes","bytes","toUpperCase","index","read","walk","b","prim","Object","op","args","Array","apply","map","int_len","parseInt","data","match_result","match","string_raw","string","TextDecoder","first_bytes","toString","padStart","is_positive","valid_bytes","checknext","push","int","reverse","join","limit","seq_lst","getMnemonic","strength","bip39","generateMnemonic","getSeedFromWords","sig_type","words","password","mnemonic","seed_bytes","mnemonicToSeed","sig_mapping","ed25519","codec","secp256k1","p256","crypto"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport type { TezJSON } from './types'\nimport bs58check from 'bs58check'\n\n\nexport function bytesConcat(x : Uint8Array, y : Uint8Array) {\n  const tmp = new Uint8Array(x.length + y.length)\n  tmp.set(x, 0)\n  tmp.set(y, x.length)\n  return tmp\n}\n\nexport function bs58check_encode(prefix : Uint8Array, input : Uint8Array) {\n  return bs58check.encode(bytesConcat(prefix, input))\n}\n\nexport function bs58check_decode(prefix : Uint8Array, input : string) {\n  return bs58check.decode(input).slice(prefix.length)\n}\n\nexport const prefix = {\n  block_hash: new Uint8Array([1, 52]), // B(51)\n  operation_hash: new Uint8Array([5, 116]), // o(51)\n  operation_list_hash: new Uint8Array([133, 233]), // Lo(52)\n  operation_list_list_hash: new Uint8Array([29, 159, 109]), // LLo(53)\n  protocol_hash: new Uint8Array([2, 170]), // P(51)\n  context_hash: new Uint8Array([79, 199]), // Co(52)\n\n  ed25519_public_key_hash: new Uint8Array([6, 161, 159]), // tz1(36)\n  secp256k1_public_key_hash: new Uint8Array([6, 161, 161]), // tz2(36)\n  p256_public_key_hash: new Uint8Array([6, 161, 164]), // tz3(36)\n\n  cryptobox_public_key_hash: new Uint8Array([153, 103]), // id(30)\n\n  ed25519_seed: new Uint8Array([13, 15, 58, 7]), // edsk(54)\n  ed25519_public_key: new Uint8Array([13, 15, 37, 217]), // edpk(54)\n  secp256k1_secret_key: new Uint8Array([17, 162, 224, 201]), // spsk(54)\n  p256_secret_key: new Uint8Array([16, 81, 238, 189]), // p2sk(54)\n\n  ed25519_encrypted_seed: new Uint8Array([7, 90, 60, 179, 41]), // edesk(88)\n  secp256k1_encrypted_secret_key: new Uint8Array([9, 237, 241, 174, 150]), // spesk(88)\n  p256_encrypted_secret_key: new Uint8Array([9, 48, 57, 115, 171]), // p2esk(88)\n\n  secp256k1_public_key: new Uint8Array([3, 254, 226, 86]), // sppk(55)\n  p256_public_key: new Uint8Array([3, 178, 139, 127]), // p2pk(55)\n  secp256k1_scalar: new Uint8Array([38, 248, 136]), // SSp(53)\n  secp256k1_element: new Uint8Array([5, 92, 0]), // GSp(54)\n\n  ed25519_secret_key: new Uint8Array([43, 246, 78, 7]), // edsk(98)\n  ed25519_signature: new Uint8Array([9, 245, 205, 134, 18]), // edsig(99)\n  secp256k1_signature: new Uint8Array([13, 115, 101, 19, 63]), // spsig1(99)\n  p256_signature: new Uint8Array([54, 240, 44, 52]), // p2sig(98)\n  generic_signature: new Uint8Array([4, 130, 43]), // sig(96)\n\n  chain_id: new Uint8Array([7, 82, 0]) // Net(15)\n}\n\nexport const watermark = {\n  block_header(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([1]), chain_id)\n  },\n  endorsement(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([2]), chain_id)\n  },\n  operation() {\n    return new Uint8Array([3])\n  },\n  custom(x : Uint8Array) {\n    return x\n  }\n}\n\nconst op_mapping = {\n  '00':'parameter',\n  '01':'storage',\n  '02':'code',\n  '03':'False',\n  '04':'Elt',\n  '05':'Left',\n  '06':'None',\n  '07':'Pair',\n  '08':'Right',\n  '09':'Some',\n  '0A':'True',\n  '0B':'Unit',\n  '0C':'PACK',\n  '0D':'UNPACK',\n  '0E':'BLAKE2B',\n  '0F':'SHA256',\n  '10':'SHA512',\n  '11':'ABS',\n  '12':'ADD',\n  '13':'AMOUNT',\n  '14':'AND',\n  '15':'BALANCE',\n  '16':'CAR',\n  '17':'CDR',\n  '18':'CHECK_SIGNATURE',\n  '19':'COMPARE',\n  '1A':'CONCAT',\n  '1B':'CONS',\n  '1C':'CREATE_ACCOUNT',\n  '1D':'CREATE_CONTRACT',\n  '1E':'IMPLICIT_ACCOUNT',\n  '1F':'DIP',\n  '20':'DROP',\n  '21':'DUP',\n  '22':'EDIV',\n  '23':'EMPTY_MAP',\n  '24':'EMPTY_SET',\n  '25':'EQ',\n  '26':'EXEC',\n  '27':'FAILWITH',\n  '28':'GE',\n  '29':'GET',\n  '2A':'GT',\n  '2B':'HASH_KEY',\n  '2C':'IF',\n  '2D':'IF_CONS',\n  '2E':'IF_LEFT',\n  '2F':'IF_NONE',\n  '30':'INT',\n  '31':'LAMBDA',\n  '32':'LE',\n  '33':'LEFT',\n  '34':'LOOP',\n  '35':'LSL',\n  '36':'LSR',\n  '37':'LT',\n  '38':'MAP',\n  '39':'MEM',\n  '3A':'MUL',\n  '3B':'NEG',\n  '3C':'NEQ',\n  '3D':'NIL',\n  '3E':'NONE',\n  '3F':'NOT',\n  '40':'NOW',\n  '41':'OR',\n  '42':'PAIR',\n  '43':'PUSH',\n  '44':'RIGHT',\n  '45':'SIZE',\n  '46':'SOME',\n  '47':'SOURCE',\n  '48':'SENDER',\n  '49':'SELF',\n  '4A':'STEPS_TO_QUOTA',\n  '4B':'SUB',\n  '4C':'SWAP',\n  '4D':'TRANSFER_TOKENS',\n  '4E':'SET_DELEGATE',\n  '4F':'UNIT',\n  '50':'UPDATE',\n  '51':'XOR',\n  '52':'ITER',\n  '53':'LOOP_LEFT',\n  '54':'ADDRESS',\n  '55':'CONTRACT',\n  '56':'ISNAT',\n  '57':'CAST',\n  '58':'RENAME',\n  '59':'bool',\n  '5A':'contract',\n  '5B':'int',\n  '5C':'key',\n  '5D':'key_hash',\n  '5E':'lambda',\n  '5F':'list',\n  '60':'map',\n  '61':'big_map',\n  '62':'nat',\n  '63':'option',\n  '64':'or',\n  '65':'pair',\n  '66':'set',\n  '67':'signature',\n  '68':'string',\n  '69':'bytes',\n  '6A':'mutez',\n  '6B':'timestamp',\n  '6C':'unit',\n  '6D':'operation',\n  '6E':'address',\n  '6F':'SLICE',\n}\n\nconst prim_mapping = {\n  '00': 'int',    \n  '01': 'string',             \n  '02': 'seq',             \n  '03': {name: 'prim', len: 0, annot: false},          \n  '04': {name: 'prim', len: 0, annot: true},\n  '05': {name: 'prim', len: 1, annot: false},           \n  '06': {name: 'prim', len: 1, annot: true},   \n  '07': {name: 'prim', len: 2, annot: false},          \n  '08': {name: 'prim', len: 2, annot: true},  \n  '09': {name: 'prim', len: 3, annot: true},\n  '0A': 'bytes'                  \n}\n\nexport function decodeRawBytes(bytes : string) : TezJSON {\n  bytes = bytes.toUpperCase()\n  \n  let index = 0\n\n  const read = len => bytes.slice(index, index + len)\n\n  const walk = () => {\n    const b = read(2)\n    const prim = prim_mapping[b]\n    \n    if (prim instanceof Object) {\n\n      index += 2\n      const op = op_mapping[read(2)]\n      index += 2\n\n      const args = Array.apply(null, new Array(prim.len))\n      return {prim: op, args: args.map(() => walk())}\n\n    } else {\n      if (b === '0A') {\n\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n        return {bytes: data}\n\n      } else if (b === '01') {\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n\n        const match_result = data.match(/[\\dA-F]{2}/g)\n        if (match_result instanceof Array) {\n          const string_raw = new Uint8Array(match_result.map(x => parseInt(x, 16)))\n          return {string: new TextDecoder('utf-8').decode(string_raw)}\n        } else {\n          throw \"Input bytes error\"\n        }\n\n      } else if (b === '00') {\n        index += 2\n\n        const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n        index += 2\n        const is_positive = first_bytes[1] === '0'\n\n        const valid_bytes = [first_bytes.slice(2)]\n\n        let checknext = first_bytes[0] === '1'\n        while (checknext) {\n          const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n          index += 2\n\n          valid_bytes.push(bytes.slice(1))\n          checknext = bytes[0] === '1'\n        }\n\n        return {int: parseInt(valid_bytes.reverse().join(''), 2).toString()}\n      } else if (b === '02') {\n        index += 2\n\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        const limit = index + int_len\n\n        const seq_lst = []\n        while (limit > index) {\n          seq_lst.push(walk())\n        }\n        return seq_lst\n      }\n\n    }\n\n  }\n\n  return walk()\n}\n\nexport default {\n  prefix,\n  watermark,\n  bs58check_encode,\n  bs58check_decode,\n  bytesConcat,\n  decodeRawBytes\n}","// @flow\n\nimport bip39 from 'bip39'\nimport codec from './codec'\n\nexport function getMnemonic(strength? : number) {\n  return bip39.generateMnemonic(strength)\n}\n\nexport function getSeedFromWords(sig_type : 'ed25519' | 'secp256k1' | 'p256', words : string | Array<string>, password? : string) {\n  const mnemonic = words instanceof Array ? words.join(' ') : words\n  const seed_bytes = bip39.mnemonicToSeed(mnemonic, password).slice(0, 32)\n  const sig_mapping = {\n    ed25519: codec.prefix.ed25519_seed,\n    secp256k1: codec.prefix.secp256k1_secret_key,\n    p256: codec.prefix.p256_secret_key\n  } \n  return codec.bs58check_encode(sig_mapping[sig_type], seed_bytes)\n}\n\nexport default {\n  getMnemonic,\n  getSeedFromWords\n}","// @flow\n\nimport codec from './codec'\nimport crypto from './crypto'\n\nexport default {\n  codec,\n  crypto\n}"]}