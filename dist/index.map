{"version":3,"sources":["PsddFKi3/codec.js","PsddFKi3/crypto.js","PsddFKi3/localop.js","index.js"],"names":["fromHex","x","Uint8Array","elliptic","utils","toArray","toHex","bytesConcat","y","tmp","length","set","bs58checkEncode","input","prefix_info","prefix_bytes","prefix","bs58check","encode","bs58checkDecode","decode","slice","bs58checkPrefixPick","bytes","block_hash","operation_hash","operation_list_hash","operation_list_list_hash","protocol_hash","context_hash","ed25519_public_key_hash","secp256k1_public_key_hash","p256_public_key_hash","cryptobox_public_key_hash","ed25519_seed","ed25519_public_key","secp256k1_secret_key","p256_secret_key","ed25519_encrypted_seed","secp256k1_encrypted_secret_key","p256_encrypted_secret_key","secp256k1_public_key","p256_public_key","secp256k1_scalar","secp256k1_element","ed25519_secret_key","ed25519_signature","secp256k1_signature","p256_signature","generic_signature","chain_id","contract_hash","prefix_mapping","matched_mapping","Net","id","tz1","tz2","tz3","KT1","B","o","P","Lo","Co","LLo","SSp","edsk","edpk","spsk","p2sk","GSp","sppk","p2pk","edesk","spesk","p2esk","sig","p2sig","edsig","spsig1","key","len","name","getContractHexKey","contract","hex","hex_key","undefined","map","join","watermark","block_header","endorsement","operation","custom","op_mapping","op_mapping_reverse","result","prim_mapping","annots","prim_mapping_reverse","false","true","encodeZarithUInt","value","num","binary","BN","toString","replace","pad","reversed","padStart","match","reverse","i","parseInt","encodeZarithInt","positive_mark","toTzStrValue","len_mapping","tag","tz_prefix","e","toTzBytes","source","is_key_hash","encodeRawBytes","rec","Array","push","Object","prim","args_len","args","forEach","arg","annots_bytes","TextEncoder","address","key_hash","signature","int","num_hex","string","string_bytes","string_hex","call","toUpperCase","decodeRawBytes","index","read","b","op","apply","annots_len","string_hex_lst","string_result","TextDecoder","split","int_len","data","match_result","string_raw","first_bytes","is_positive","valid_bytes","checknext","limit","seq_lst","blake2bHash","blake","blake2b","getMnemonic","strength","bip39","generateMnemonic","Key","constructor","secret_key","pub_key","ed25519","codec","secp256k1","p256","getSecretKey","getPublicKey","getKeyFromEd25519","eddsa","key_pair","nacl","sign","keyPair","secretKey","publicKey","getKeyFromSecp256k1","ec","keyFromPrivate","concat","getPublic","getX","getKeyFromP256","decryptKey","encrypted","password","encrypted_bytes","salt","encrypted_msg","crypto","pbkdf2Sync","secretbox","open","key_mapping","getKeyFromSecretKey","sk","getKeyFromSeed","seed","seed_bytes","fromSeed","getKeyFromWords","words","mnemonic","mnemonicToSeed","signOperation","input_operation","operation_bytes","sig_mapping","secret_key_bytes","fromSecretKey","sig_bytes","detached","r","s","canonical","op_hex2bytes","transaction","fee","counter","gas_limit","storage_limit","amount","destination","parameters","origination","managerPubkey","balance","spendable","delegatable","delegate","script","code","storage","reveal","public_key","forgeOperation","contents","branch","branch_bytes","op_hex","kind","toLowerCase","parseOperationBytes","readUInt","output","op_tag","code_len","storage_len","export_fns","protocol_mapping","PsddFKi3","PsddFKi3_codec","PsddFKi3_crypto","localop","PsddFKi3_localop","modProtocol","protocol"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nimport { TextDecoder, TextEncoder } from 'util'\n\nimport BN from 'bn.js'\nimport bs58check from 'bs58check'\nimport elliptic from 'elliptic'\nimport type { Micheline } from '../types'\n\nexport function fromHex(x : string) {\n  return new Uint8Array(elliptic.utils.toArray(x, 'hex'))\n}\nexport function toHex(x : Uint8Array) {\n  return elliptic.utils.toHex(x)\n}\n\nexport function bytesConcat(x : Uint8Array, y : Uint8Array) {\n  const tmp = new Uint8Array(x.length + y.length)\n  tmp.set(x, 0)\n  tmp.set(y, x.length)\n  return tmp\n}\n\nexport function bs58checkEncode(input : Uint8Array, prefix_info : Uint8Array | string) {\n  const prefix_bytes = typeof prefix_info === 'string' ? prefix[prefix_info] : prefix_info\n  return bs58check.encode(bytesConcat(prefix_bytes, input))\n}\n\nexport function bs58checkDecode(input : string, prefix? : Uint8Array) {\n  return bs58check.decode(input).slice(prefix ? prefix.length : bs58checkPrefixPick(input).bytes.length)\n}\n\nexport const prefix = {\n  block_hash: new Uint8Array([1, 52]), // B(51)\n  operation_hash: new Uint8Array([5, 116]), // o(51)\n  operation_list_hash: new Uint8Array([133, 233]), // Lo(52)\n  operation_list_list_hash: new Uint8Array([29, 159, 109]), // LLo(53)\n  protocol_hash: new Uint8Array([2, 170]), // P(51)\n  context_hash: new Uint8Array([79, 199]), // Co(52)\n\n  ed25519_public_key_hash: new Uint8Array([6, 161, 159]), // tz1(36)\n  secp256k1_public_key_hash: new Uint8Array([6, 161, 161]), // tz2(36)\n  p256_public_key_hash: new Uint8Array([6, 161, 164]), // tz3(36)\n\n  cryptobox_public_key_hash: new Uint8Array([153, 103]), // id(30)\n\n  ed25519_seed: new Uint8Array([13, 15, 58, 7]), // edsk(54)\n  ed25519_public_key: new Uint8Array([13, 15, 37, 217]), // edpk(54)\n  secp256k1_secret_key: new Uint8Array([17, 162, 224, 201]), // spsk(54)\n  p256_secret_key: new Uint8Array([16, 81, 238, 189]), // p2sk(54)\n\n  ed25519_encrypted_seed: new Uint8Array([7, 90, 60, 179, 41]), // edesk(88)\n  secp256k1_encrypted_secret_key: new Uint8Array([9, 237, 241, 174, 150]), // spesk(88)\n  p256_encrypted_secret_key: new Uint8Array([9, 48, 57, 115, 171]), // p2esk(88)\n\n  secp256k1_public_key: new Uint8Array([3, 254, 226, 86]), // sppk(55)\n  p256_public_key: new Uint8Array([3, 178, 139, 127]), // p2pk(55)\n  secp256k1_scalar: new Uint8Array([38, 248, 136]), // SSp(53)\n  secp256k1_element: new Uint8Array([5, 92, 0]), // GSp(54)\n\n  ed25519_secret_key: new Uint8Array([43, 246, 78, 7]), // edsk(98)\n  ed25519_signature: new Uint8Array([9, 245, 205, 134, 18]), // edsig(99)\n  secp256k1_signature: new Uint8Array([13, 115, 101, 19, 63]), // spsig1(99)\n  p256_signature: new Uint8Array([54, 240, 44, 52]), // p2sig(98)\n  generic_signature: new Uint8Array([4, 130, 43]), // sig(96)\n\n  chain_id: new Uint8Array([7, 82, 0]), // Net(15)\n\n  contract_hash: new Uint8Array([2, 90, 121]) // KT1(36)\n}\n\nexport function bs58checkPrefixPick(input : string) : {bytes: Uint8Array, name: string} {\n  const prefix_mapping = {\n    [15]: {\n      Net: 'chain_id'\n    },\n    [30]: {\n      id: 'cryptobox_public_key_hash'\n    },\n    [36]: {\n      tz1: 'ed25519_public_key_hash',\n      tz2: 'secp256k1_public_key_hash',\n      tz3: 'p256_public_key_hash',\n      KT1: 'contract_hash'\n    },\n    [51]: {\n      B: 'block_hash',\n      o: 'operation_hash',\n      P: 'protocol_hash'\n    },\n    [52]: {\n      Lo: 'operation_list_hash',\n      Co: 'context_hash'\n    },\n    [53]: {\n      LLo: 'operation_list_list_hash',\n      SSp: 'secp256k1_scalar'\n    },\n    [54]: {\n      edsk: 'ed25519_seed',\n      edpk: 'ed25519_public_key',\n      spsk: 'secp256k1_secret_key',\n      p2sk: 'p256_secret_key',\n      GSp: 'secp256k1_element'\n    },\n    [55]: {\n      sppk: 'secp256k1_public_key',\n      p2pk: 'p256_public_key'\n    },\n    [88]: {\n      edesk: 'ed25519_encrypted_seed',\n      spesk: 'secp256k1_encrypted_secret_key',\n      p2esk: 'p256_encrypted_secret_key'\n    },\n    [96]: {\n      sig: 'generic_signature'\n    },\n    [98]: {\n      edsk: 'ed25519_secret_key',\n      p2sig: 'p256_signature'\n    },\n    [99]: {\n      edsig: 'ed25519_signature',\n      spsig1: 'secp256k1_signature'\n    }\n  }\n\n  const matched_mapping = prefix_mapping[input.length]\n  if (matched_mapping) {\n    for (const key in matched_mapping) {\n      const len = key.length\n      if (input.slice(0, len) === key)\n        return {bytes: prefix[matched_mapping[key]], name:matched_mapping[key]} \n    }\n  }\n\n  throw `No prefix found for: ${input}`\n}\n\nexport function getContractHexKey(contract : string) {\n  if (contract.length !== 36 || contract.slice(0, 3) !== 'KT1')\n    throw `invalid contract: ${contract}`\n\n  const bytes = bs58checkDecode(contract, prefix.contract_hash)\n  const hex = toHex(bytes)\n  const hex_key = [[0,2], [2,4], [4,6], [6,8], [8,10], [10,undefined]].map(x => hex.slice(x[0], x[1])).join('/')\n\n  return hex_key\n}\n\nexport const watermark = {\n  block_header(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([1]), chain_id)\n  },\n  endorsement(chain_id : Uint8Array) {\n    return bytesConcat(new Uint8Array([2]), chain_id)\n  },\n  operation() {\n    return new Uint8Array([3])\n  },\n  custom(x : Uint8Array) {\n    return x\n  }\n}\n\nconst op_mapping = {\n  '00':'parameter',\n  '01':'storage',\n  '02':'code',\n  '03':'False',\n  '04':'Elt',\n  '05':'Left',\n  '06':'None',\n  '07':'Pair',\n  '08':'Right',\n  '09':'Some',\n  '0A':'True',\n  '0B':'Unit',\n  '0C':'PACK',\n  '0D':'UNPACK',\n  '0E':'BLAKE2B',\n  '0F':'SHA256',\n  '10':'SHA512',\n  '11':'ABS',\n  '12':'ADD',\n  '13':'AMOUNT',\n  '14':'AND',\n  '15':'BALANCE',\n  '16':'CAR',\n  '17':'CDR',\n  '18':'CHECK_SIGNATURE',\n  '19':'COMPARE',\n  '1A':'CONCAT',\n  '1B':'CONS',\n  '1C':'CREATE_ACCOUNT',\n  '1D':'CREATE_CONTRACT',\n  '1E':'IMPLICIT_ACCOUNT',\n  '1F':'DIP',\n  '20':'DROP',\n  '21':'DUP',\n  '22':'EDIV',\n  '23':'EMPTY_MAP',\n  '24':'EMPTY_SET',\n  '25':'EQ',\n  '26':'EXEC',\n  '27':'FAILWITH',\n  '28':'GE',\n  '29':'GET',\n  '2A':'GT',\n  '2B':'HASH_KEY',\n  '2C':'IF',\n  '2D':'IF_CONS',\n  '2E':'IF_LEFT',\n  '2F':'IF_NONE',\n  '30':'INT',\n  '31':'LAMBDA',\n  '32':'LE',\n  '33':'LEFT',\n  '34':'LOOP',\n  '35':'LSL',\n  '36':'LSR',\n  '37':'LT',\n  '38':'MAP',\n  '39':'MEM',\n  '3A':'MUL',\n  '3B':'NEG',\n  '3C':'NEQ',\n  '3D':'NIL',\n  '3E':'NONE',\n  '3F':'NOT',\n  '40':'NOW',\n  '41':'OR',\n  '42':'PAIR',\n  '43':'PUSH',\n  '44':'RIGHT',\n  '45':'SIZE',\n  '46':'SOME',\n  '47':'SOURCE',\n  '48':'SENDER',\n  '49':'SELF',\n  '4A':'STEPS_TO_QUOTA',\n  '4B':'SUB',\n  '4C':'SWAP',\n  '4D':'TRANSFER_TOKENS',\n  '4E':'SET_DELEGATE',\n  '4F':'UNIT',\n  '50':'UPDATE',\n  '51':'XOR',\n  '52':'ITER',\n  '53':'LOOP_LEFT',\n  '54':'ADDRESS',\n  '55':'CONTRACT',\n  '56':'ISNAT',\n  '57':'CAST',\n  '58':'RENAME',\n  '59':'bool',\n  '5A':'contract',\n  '5B':'int',\n  '5C':'key',\n  '5D':'key_hash',\n  '5E':'lambda',\n  '5F':'list',\n  '60':'map',\n  '61':'big_map',\n  '62':'nat',\n  '63':'option',\n  '64':'or',\n  '65':'pair',\n  '66':'set',\n  '67':'signature',\n  '68':'string',\n  '69':'bytes',\n  '6A':'mutez',\n  '6B':'timestamp',\n  '6C':'unit',\n  '6D':'operation',\n  '6E':'address',\n  '6F':'SLICE',\n}\nconst op_mapping_reverse = (() => {\n  const result = {}\n  for (const key in op_mapping) {\n    result[op_mapping[key]] = key\n  }\n  return result\n})()\n\nconst prim_mapping = {\n  '00': 'int',    \n  '01': 'string',             \n  '02': 'seq',             \n  '03': {name: 'prim', len: 0, annots: false},          \n  '04': {name: 'prim', len: 0, annots: true},\n  '05': {name: 'prim', len: 1, annots: false},           \n  '06': {name: 'prim', len: 1, annots: true},   \n  '07': {name: 'prim', len: 2, annots: false},          \n  '08': {name: 'prim', len: 2, annots: true},  \n  '09': {name: 'prim', len: 3, annots: true},\n  '0A': 'bytes'                  \n}\nconst prim_mapping_reverse = {\n  [0]: {\n    false: '03',\n    true: '04'\n  },\n  [1]: {\n    false: '05',\n    true: '06'\n  },\n  [2]: {\n    false: '07',\n    true: '08'\n  },\n  [3]: {\n    true: '09'\n  }\n}\n\n\nexport function encodeZarithUInt(value : string) {\n  const num = new BN(value, 10)\n  const binary = num.toString(2).replace('-', '')\n  const pad = binary.length % 7 ? binary.length + 7 - binary.length % 7 : binary.length\n\n  const splitted = binary.padStart(pad, '0').match(/\\d{7}/g)\n  const reversed = splitted.reverse()\n\n  return reversed.map((x, i) => \n    parseInt((i === reversed.length - 1 ? '0' : '1') + x, 2)\n    .toString(16)\n    .padStart(2, '0')).join('')\n}\n\nexport function encodeZarithInt(value : string) {\n  const num = new BN(value, 10)\n  const positive_mark = num.toString(2)[0] === '-' ? '1' : '0'\n  const binary = num.toString(2).replace('-', '')\n  const pad = binary.length <= 6 ? 6 : \n    (binary.length - 6) % 7 ? binary.length + 7 - (binary.length - 6) % 7 : binary.length\n\n  const splitted = binary.padStart(pad, '0').match(/\\d{6,7}/g)\n  const reversed = splitted.reverse()\n\n  reversed[0] = positive_mark + reversed[0]\n\n  return reversed.map((x, i) => \n    parseInt((i === reversed.length - 1 ? '0' : '1') + x, 2)\n    .toString(16)\n    .padStart(2, '0')).join('')\n}\n\nexport function toTzStrValue(input : string) {\n  const len_mapping = {\n    [44]() {\n      const tag = input.slice(0, 2)\n      if (tag === '00') {\n        const tag = input.slice(2, 4)\n        const tz_prefix = {\n          '00': 'ed25519_public_key_hash', \n          '01': 'secp256k1_public_key_hash', \n          '02': 'p256_public_key_hash'\n        }\n        return bs58checkEncode(fromHex(input.slice(4)), tz_prefix[tag])\n\n      } else if (tag === '01') {\n        return bs58checkEncode(fromHex(input.slice(2, 42)), 'contract_hash')\n\n      } else {\n        throw `Invalid tag(${tag}) for contract id`\n      }\n    },\n    [42]() {\n      const tag = input.slice(0, 2)\n      const tz_prefix = {\n        '00': 'ed25519_public_key_hash', \n        '01': 'secp256k1_public_key_hash', \n        '02': 'p256_public_key_hash'\n      }\n      return bs58checkEncode(fromHex(input.slice(2)), tz_prefix[tag])\n    },\n    [66]() {\n      const tag = input.slice(0, 2)\n      if (tag !== '00')\n        throw `Invalid tag(${tag}) for Ed25519 public key`\n\n      return bs58checkEncode(fromHex(input.slice(2)), 'ed25519_public_key')\n    },\n    [68]() {\n      const tag = input.slice(0, 2)\n      if (tag === '01')\n        return bs58checkEncode(fromHex(input.slice(2)), 'secp256k1_public_key')\n      else if (tag === '02')\n        return bs58checkEncode(fromHex(input.slice(2)), 'p256_public_key')\n      else \n        throw `Invalid tag(${tag}) for Secp256k1 and P256 public key`\n    }\n  }\n\n  try {\n    return len_mapping[input.length]()\n  } catch(e) {\n    throw `Invalid input to decode to Micheline: ${input}`\n  }\n}\n\nexport function toTzBytes(source : string, is_key_hash : boolean = false) {\n  const prefix = bs58checkPrefixPick(source)\n  const bytes = bs58checkDecode(source, prefix.bytes)\n\n  const tag_mapping = {\n    contract_hash: '01',\n    ed25519_public_key_hash: is_key_hash ? '00' : '0000',\n    secp256k1_public_key_hash: is_key_hash ? '01' : '0001',\n    p256_public_key_hash: is_key_hash ? '02' : '0002',\n    ed25519_public_key: '00',\n    secp256k1_public_key: '01',\n    p256_public_key: '02'\n  }\n  const padding_mapping = {\n    contract_hash: '00'\n  }\n\n  return (tag_mapping[prefix.name] || '') + toHex(bytes) + (padding_mapping[prefix.name] || '')\n}\n\nexport function encodeRawBytes(input : Micheline) : string {\n  const rec = (input : Micheline) : string => {\n    const result : Array<string> = []\n\n    if (input instanceof Array) {\n      result.push('02')\n      const bytes = input.map(x => rec(x)).join('')\n      const len = bytes.length / 2\n      result.push(len.toString(16).padStart(8, '0'))\n      result.push(bytes)\n\n    } else if (input instanceof Object) {\n      if (input.prim) {\n        const args_len = input.args ? input.args.length : 0\n        result.push(prim_mapping_reverse[args_len][!!input.annots])\n        result.push(op_mapping_reverse[input.prim])\n        if (input.args) {\n          input.args.forEach(arg => {\n            result.push(rec(arg))\n          })\n        }\n\n        if (input.annots) {\n          const annots_bytes = input.annots.map(x => \n            toHex(new TextEncoder().encode(x))).join('20')\n          result.push((annots_bytes.length / 2).toString(16).padStart(8, '0'))\n          result.push(annots_bytes)\n        }\n\n      } else if (input.bytes || \n                 input.address || \n                 input.contract || \n                 input.key || \n                 input.key_hash ||\n                 input.signature) {\n\n        const bytes = input.bytes || \n          toTzBytes(input.address || \n                    input.contract || \n                    input.key || \n                    input.key_hash ||\n                    input.signature, input.key_hash)\n\n        const len = bytes.length / 2\n        result.push('0A')\n        result.push(len.toString(16).padStart(8, '0'))\n        result.push(bytes)\n\n      } else if (input.int) {\n\n        const num_hex = encodeZarithInt(input.int)\n        result.push('00')\n        result.push(num_hex)\n\n      } else if (input.string) {\n\n        const string_bytes = new TextEncoder().encode(input.string)\n        const string_hex = [].slice.call(string_bytes).map(x => x.toString(16).padStart(2, '0')).join('')\n        const len = string_bytes.length\n        result.push('01')\n        result.push(len.toString(16).padStart(8, '0'))\n        result.push(string_hex)\n\n      }\n    }\n\n    return result.join('')\n  }\n\n  return rec(input).toUpperCase()\n}\n\nexport function decodeRawBytes(bytes : string) : Micheline {\n  bytes = bytes.toUpperCase()\n  \n  let index = 0\n\n  const read = len => bytes.slice(index, index + len)\n\n  const rec = () => {\n    const b = read(2)\n    const prim = prim_mapping[b]\n    \n    if (prim instanceof Object) {\n\n      index += 2\n      const op = op_mapping[read(2)]\n      index += 2\n\n      const args = Array.apply(null, new Array(prim.len))\n      const result = {prim: op, args: args.map(() => rec()), annots: undefined}\n\n      if (!prim.len)\n        delete result.args\n\n      if (prim.annots) {\n        const annots_len = parseInt(read(8), 16) * 2\n        index += 8\n\n        const string_hex_lst = read(annots_len).match(/[\\dA-F]{2}/g)\n        index += annots_len\n        \n        if (string_hex_lst) {\n          const string_bytes = new Uint8Array(string_hex_lst.map(x => parseInt(x, 16)))\n          const string_result = new TextDecoder('utf-8').decode(string_bytes)\n          result.annots = string_result.split(' ')\n        }\n      } else {\n        delete result.annots\n      }\n\n      return result\n\n    } else {\n      if (b === '0A') {\n\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n        return {bytes: data}\n\n      } else if (b === '01') {\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n\n        const match_result = data.match(/[\\dA-F]{2}/g)\n        if (match_result instanceof Array) {\n          const string_raw = new Uint8Array(match_result.map(x => parseInt(x, 16)))\n          return {string: new TextDecoder('utf-8').decode(string_raw)}\n        } else {\n          throw `Input bytes error`\n        }\n\n      } else if (b === '00') {\n        index += 2\n\n        const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n        index += 2\n        const is_positive = first_bytes[1] === '0'\n\n        const valid_bytes = [first_bytes.slice(2)]\n\n        let checknext = first_bytes[0] === '1'\n        while (checknext) {\n          const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n          index += 2\n\n          valid_bytes.push(bytes.slice(1))\n          checknext = bytes[0] === '1'\n        }\n\n        const num = new BN(valid_bytes.reverse().join(''), 2)\n        return {int: num.toString(10)}\n      } else if (b === '02') {\n        index += 2\n\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        const limit = index + int_len\n\n        const seq_lst = []\n        while (limit > index) {\n          seq_lst.push(rec())\n        }\n        return seq_lst\n      }\n\n    }\n\n    throw `Invalid raw bytes: Byte:${b} Index:${index}`\n  }\n\n  return rec()\n}\n\nexport default {\n  fromHex,\n  toHex,\n  toTzBytes,\n  toTzStrValue,\n  prefix,\n  watermark,\n  bs58checkEncode,\n  bs58checkDecode,\n  bs58checkPrefixPick,\n  getContractHexKey,\n  bytesConcat,\n  encodeRawBytes,\n  decodeRawBytes,\n  encodeZarithInt,\n  encodeZarithUInt\n}","// @flow\n\nimport bip39 from 'bip39'\nimport codec from './codec'\nimport elliptic from 'elliptic'\nimport blake from 'blakejs'\nimport crypto from 'crypto'\nimport { secretbox } from 'tweetnacl'\nimport nacl from 'tweetnacl'\n\nexport function blake2bHash(input : Uint8Array, len : number = 32) {\n  return blake.blake2b(input, null, len)\n}\n\nexport function getMnemonic(strength? : number) {\n  return bip39.generateMnemonic(strength)\n}\n\nclass Key {\n  name : string\n  secret_key : Uint8Array\n  pub_key : Uint8Array\n  address : string\n\n  constructor(name : 'ed25519' | 'secp256k1' | 'p256', secret_key : Uint8Array, pub_key : Uint8Array) {\n    this.name = name\n    this.secret_key = secret_key\n    this.pub_key = pub_key\n\n    this.address = {\n      ed25519: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.ed25519_public_key_hash),\n      secp256k1: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.secp256k1_public_key_hash),\n      p256: () => \n        codec.bs58checkEncode(blake2bHash(this.pub_key, 20), codec.prefix.p256_public_key_hash) \n    }[this.name]()\n  }\n\n  getSecretKey() {\n    return {\n      ed25519: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.ed25519_secret_key),\n      secp256k1: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.secp256k1_secret_key),\n      p256: () => \n        codec.bs58checkEncode(this.secret_key, codec.prefix.p256_secret_key)\n    }[this.name]()\n  }\n\n  getPublicKey() {\n    return {\n      ed25519: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.ed25519_public_key),\n      secp256k1: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.secp256k1_public_key),\n      p256: () => \n        codec.bs58checkEncode(this.pub_key, codec.prefix.p256_public_key)\n    }[this.name]()\n  }\n}\n\nfunction getKeyFromEd25519(input : Uint8Array) {\n  const ed25519 = new elliptic.eddsa('ed25519')\n  const key_pair = nacl.sign.keyPair[input.length === 32 ? 'fromSeed' : 'fromSecretKey'](input)\n  return new Key('ed25519', key_pair.secretKey, key_pair.publicKey)\n}\nfunction getKeyFromSecp256k1(key : Uint8Array) {\n  const key_pair = (new elliptic.ec('secp256k1')).keyFromPrivate(key)\n  const pub_key = new Uint8Array([2].concat(key_pair.getPublic().getX().toArray()))\n  return new Key('secp256k1', key, pub_key)\n}\nfunction getKeyFromP256(key : Uint8Array) {\n  const key_pair = (new elliptic.ec('p256')).keyFromPrivate(key)\n  const pub_key = new Uint8Array([3].concat(key_pair.getPublic().getX().toArray()))\n  return new Key('p256', key, pub_key)\n}\n \nexport function decryptKey(encrypted : string, password : string) : Key {\n  const prefix = codec.bs58checkPrefixPick(encrypted)\n  const encrypted_bytes = codec.bs58checkDecode(encrypted, prefix.bytes)\n  const salt = encrypted_bytes.slice(0, 8)\n  const encrypted_msg = encrypted_bytes.slice(8)\n  const key = crypto.pbkdf2Sync(password, salt, 32768, 32, 'sha512')\n  const result = secretbox.open(encrypted_msg, new Uint8Array(24), key)\n  const key_mapping = {\n    ed25519_encrypted_seed: getKeyFromEd25519,\n    secp256k1_encrypted_secret_key: getKeyFromSecp256k1,\n    p256_encrypted_secret_key: getKeyFromP256\n  }\n\n  if (prefix.name in key_mapping) {\n    return key_mapping[prefix.name](result)\n  } else {\n    throw 'No valid prefix for encrypted key found'\n  }\n}\n\nexport function getKeyFromSecretKey(sk: string) {\n  const prefix = codec.bs58checkPrefixPick(sk)\n  const bytes = codec.bs58checkDecode(sk, prefix.bytes)\n\n  const key_mapping = {\n    ed25519_secret_key: getKeyFromEd25519,\n    secp256k1_secret_key: getKeyFromSecp256k1,\n    p256_encrypted_secret_key: getKeyFromP256\n  }\n\n  if (prefix.name in key_mapping) {\n    return key_mapping[prefix.name](bytes)\n  } else {\n    throw 'No valid prefix for secret key found'\n  }\n}\n\nexport function getKeyFromSeed(seed : string | Uint8Array) {\n  const seed_bytes = typeof seed === 'string' ? codec.bs58checkDecode(seed) : seed\n  const key_pair = nacl.sign.keyPair.fromSeed(seed_bytes)\n  return new Key('ed25519', key_pair.secretKey, key_pair.publicKey)\n}\n\nexport function getKeyFromWords(words : string | Array<string>, password? : string) {\n  const mnemonic = words instanceof Array ? words.join(' ') : words\n  const seed_bytes = bip39.mnemonicToSeed(mnemonic, password).slice(0, 32)\n  return getKeyFromSeed(seed_bytes)\n}\n\nexport function signOperation(input_operation : Uint8Array | string, secret_key : string) {\n  const operation_bytes = typeof input_operation === 'string' ? codec.fromHex(input_operation) : input_operation\n  const marked_operation = codec.bytesConcat(codec.watermark.operation(), operation_bytes)\n  const operation_hash = blake2bHash(marked_operation)\n  const prefix = codec.bs58checkPrefixPick(secret_key)\n  const sig_mapping = {\n    ed25519_secret_key: codec.prefix.ed25519_signature,\n    secp256k1_secret_key: codec.prefix.secp256k1_signature,\n    p256_secret_key: codec.prefix.p256_signature\n  }\n\n  const secret_key_bytes = codec.bs58checkDecode(secret_key, prefix.bytes)\n  if (prefix.name in sig_mapping) {\n    const key = {\n      ed25519_secret_key: () => nacl.sign.keyPair.fromSecretKey(secret_key_bytes).secretKey,\n      secp256k1_secret_key: () => (new elliptic.ec('secp256k1')).keyFromPrivate(secret_key_bytes),\n      p256_secret_key: () => (new elliptic.ec('p256')).keyFromPrivate(secret_key_bytes)\n    }[prefix.name]()\n\n    const sig_bytes = prefix.name === 'ed25519_secret_key' ? \n      new Uint8Array(nacl.sign.detached(operation_hash, key)) :\n      (sig => new Uint8Array(sig.r.toArray().concat(sig.s.toArray())))(key.sign(operation_hash, {canonical: true})) \n\n    return codec.bs58checkEncode(sig_bytes, sig_mapping[prefix.name])\n  } else {\n    throw `invalid prefix for: ${secret_key}`\n  }\n}\n\nexport default {\n  getMnemonic,\n  getKeyFromSeed,\n  getKeyFromWords,\n  decryptKey,\n  getKeyFromSecretKey,\n  signOperation\n}","// @flow\n\nimport BN from 'bn.js'\nimport codec from './codec'\n\n\nconst op_hex2bytes = {\n  transaction(op : Object) {\n    const result = ['08']\n  \n    result.push(codec.toTzBytes(op.source))\n\n    ;[op.fee, op.counter, op.gas_limit, op.storage_limit, op.amount].forEach(x => {\n      const hex = codec.encodeZarithUInt(x)\n      result.push(hex)\n    })\n\n    result.push(codec.toTzBytes(op.destination))\n\n    result.push(op.parameters ? 'FF' : '00')\n    if (op.parameters) {\n      const parameters = codec.encodeRawBytes(op.parameters)\n      result.push((parameters.length / 2).toString(16).padStart(8, '0'))\n      result.push(parameters)\n    }\n\n    return result.join('')\n  },\n  origination(op : Object) {\n    const result = ['09']\n\n    result.push(codec.toTzBytes(op.source))\n\n    ;[op.fee, op.counter, op.gas_limit, op.storage_limit].forEach(x => {\n      const hex = codec.encodeZarithUInt(x)\n      result.push(hex)\n    })\n\n    result.push(codec.toTzBytes(op.managerPubkey, true))\n\n    result.push(codec.encodeZarithUInt(op.balance))\n\n    result.push(op.spendable ? 'FF' : '00')\n    result.push(op.delegatable ? 'FF' : '00')\n    result.push(op.delegate ? 'FF' : '00')\n    if (op.delegate) {\n      result.push(codec.toTzBytes(op.delegate, true))\n    }\n\n    result.push(op.script ? 'FF' : '00')\n    if (op.script && op.script.code && op.script.storage) {\n      const code = codec.encodeRawBytes(op.script.code)\n      result.push((code.length / 2).toString(16).padStart(8, '0'))\n      result.push(code)\n\n      const storage = codec.encodeRawBytes(op.script.storage)\n      result.push((storage.length / 2).toString(16).padStart(8, '0'))\n      result.push(storage)\n    }\n\n    return result.join('')\n  },\n  reveal(op : Object) {\n    const result = ['07']\n\n    result.push(codec.toTzBytes(op.source))\n\n    ;[op.fee, op.counter, op.gas_limit, op.storage_limit].forEach(x => {\n      const hex = codec.encodeZarithUInt(x)\n      result.push(hex)\n    })\n\n    result.push(codec.toTzBytes(op.public_key, true))\n\n    return result.join('')\n  }\n}\n\nexport function forgeOperation(contents : Array<Object>, branch : string) {\n  const branch_bytes = codec.bs58checkDecode(branch)\n  const result = [codec.toHex(branch_bytes)]\n\n  contents.forEach(op => {\n    const op_hex = op_hex2bytes[op.kind](op)\n    result.push(op_hex)\n  })\n\n  return result.join('').toLowerCase()\n}\n\nexport function parseOperationBytes(input : string) {\n  input = input.slice(64).toUpperCase()\n\n  let index = 0\n\n  const read = len => {\n    const result = input.slice(index, len ? index + len : undefined)\n    index += len\n    return result\n  }\n\n  const readUInt = () => {\n    const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n    const valid_bytes = [first_bytes.slice(1)]\n\n    let checknext = first_bytes[0] === '1'\n    while (checknext) {\n      const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n\n      valid_bytes.push(bytes.slice(1))\n      checknext = bytes[0] === '1'\n    }\n\n    const num = new BN(valid_bytes.reverse().join(''), 2)\n    return num.toString(10)\n  }\n\n  const output = []\n  while(index < input.length - 1) {\n    const op_tag = read(2)\n\n    if (op_tag === '07') {\n      const source = codec.toTzStrValue(read(44))\n      const fee = readUInt()\n      const counter = readUInt()\n      const gas_limit = readUInt()\n      const storage_limit = readUInt()\n      const public_key = codec.toTzStrValue(read())\n\n      output.push({\n        kind: 'reveal',\n        source,\n        fee,\n        counter,\n        gas_limit,\n        storage_limit,\n        public_key\n      })\n\n    } else if (op_tag === '08') {\n      const source = codec.toTzStrValue(read(44))\n      const fee = readUInt()\n      const counter = readUInt()\n      const gas_limit = readUInt()\n      const storage_limit = readUInt()\n      const amount = readUInt()\n      const destination = codec.toTzStrValue(read(44))\n      let parameters\n      if (read(2) === 'FF') {\n        const len = parseInt(read(8), 16) * 2\n        parameters = codec.decodeRawBytes(read(len))\n      }\n\n      output.push({\n        kind: 'transaction',\n        source,\n        fee,\n        counter,\n        gas_limit,\n        storage_limit,\n        amount,\n        destination,\n        parameters\n      })\n    } else if (op_tag === '09') {\n      const source = codec.toTzStrValue(read(44))\n      const fee = readUInt()\n      const counter = readUInt()\n      const gas_limit = readUInt()\n      const storage_limit = readUInt()\n      const managerPubkey = codec.toTzStrValue(read(42))\n      const balance = readUInt()\n      const spendable = read(2) === '00' ? false : true\n      const delegatable = read(2) === '00' ? false : true\n      const delegate = read(2) === '00' ? undefined : codec.toTzStrValue(read(42))\n      let script\n      if (read(2) === 'FF') {\n        const code_len = parseInt(read(8), 16) * 2\n        const code = codec.decodeRawBytes(read(code_len))\n\n        const storage_len = parseInt(read(8), 16) * 2\n        const storage = codec.decodeRawBytes(read(storage_len))\n        script = {code, storage}\n      }\n\n      output.push({\n        kind: 'origination',\n        source,\n        fee,\n        counter,\n        gas_limit,\n        storage_limit,\n        managerPubkey,\n        balance,\n        spendable,\n        delegatable,\n        delegate,\n        script\n      })\n    } else {\n      throw `Only support reveal(07), transaction(08) and origination(09) tags.\\nBut current tag is ${op_tag} at index: ${index}`\n    }\n\n  }\n\n  return output\n}\n\nexport default {\n  forgeOperation,\n  parseOperationBytes\n}","// @flow\n\nimport PsddFKi3_codec from './PsddFKi3/codec'\nimport PsddFKi3_crypto from './PsddFKi3/crypto'\nimport PsddFKi3_localop from './PsddFKi3/localop'\n\nconst protocol_mapping = {\n  PsddFKi3: {\n    codec: PsddFKi3_codec,\n    crypto: PsddFKi3_crypto,\n    localop: PsddFKi3_localop\n  }\n}\n\nconst export_fns = {\n  codec: protocol_mapping.PsddFKi3.codec,\n  crypto: protocol_mapping.PsddFKi3.crypto,\n  localop: protocol_mapping.PsddFKi3.localop,\n  \n  modProtocol(protocol : string) {\n    if (protocol in protocol_mapping) {\n      export_fns.codec = protocol_mapping[protocol].codec\n      export_fns.crypto = protocol_mapping[protocol].crypto\n      export_fns.localop = protocol_mapping[protocol].localop\n    } else {\n      throw `Protocol:${protocol} doesn't exist in protocols`\n    }\n  }\n}\n\nexport default export_fns"]}